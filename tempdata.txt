
3.18.2.2. 实现方式 
在统一数据交换平台中引入适配器的概念，以webservice做为数据交换的方
式。每个适配器能够处理某一种格式的协议，格式一致的多个接口可以使用同一
个适配器，只需简单在参数表中配置适配器的名称即可。 
适配器增强了数据交换平台对新增协议格式的适应能力，新增协议格式只需
开发新的适配器，对已有的程序不会产生影响。而适配的开发也相当简单，大部
分实现都已开发为工具类。处理过程如下图所示：

3.18.2.3. 技术要点 
协议转换主要分格式转换和字段及编码转换两类，格式转换主要体现在web 
service方式中，比如报文各节点的名称和结构，这部分在适配器中予以处理。对
于字段及编码转换，系统设置了转换字典来进行对应结构维护，与之对应由工具
类进行处理，具体处理过程基本如下： 
首先，将数据转成HashMap<String,ArrayList<HashMap<String,String>>>这
样的结构，最外一层可理解为结果集，ArrayList为该结果集的行记录，最里面
的HashMap<String,String>为每行的列名及列值，然后再对照转换字典进行列名
的转换和列值的编码转换，如DISEASE_ID转换为DISEASE_ID，或者将公路病
害类型由A转化为10，其中编码转换采用下拉数据的方式，在系统参数表
sys_param_value中维护一个下拉，param_code为源代码、param_value为目标代
码，将sys_extend_property表中的下拉名称ext_code填到转换字典中。 
其次，系统选用CXF拦截器与log4j 相结合来记录服务调用日志。CXF建
立于一个通用的消息层之上，主要由消息、拦截器（Interceptor）、拦截器链
（InterceptorChain）组成，拦截器与拦截器链与JSP/Servlet 中的Filter 和
FilterChain类似。CXF中消息处理机制为不同类型的消息准备一系列拦截器，组成拦截器链，然后以消息为参数逐个调用各拦截器。每个拦截器对消息进行一部
分处理，并写回消息对象中。后面的拦截器利用前面拦截器的处理结果，从消息
对象中读取，再把处理结果写回消息对象，供更后续的拦截器使用。当整个链中
的拦截器全部处理完成，这个消息也就处理完了。 
在大多拦截器中，一般都定义了两个方法，一个处理消息handleMessage， 一
个处理错误handleFault，在handleMessage中可从传来的Message中获取服务调
用的相关信息，在handleFault中可从Message中获取异常相关信息。利用拦截
器的机制，我们就可以在适当的阶段适当的时机获取服务调用的信息，加工成日
志信息后交由log4j 去记录。 
为了灵活适应各种接口，数据交换平台做了很多参数设置，如接口类型
维护、适配器维护、接口与适配器对应维护、字段及编码转换字典维护、厂
商服务调用维护、中间库获取数据参数维护、数据库巡查任务维护（定时任
务）等功能，做到系统灵活配置，快速响应变更。由于这些参数的数据量不
会很大，考虑到读取性能，这些参数在启动服务时大都读到内存中供取用。
另外，数据交换平台还提供了日志文件的查询下载、服务调用实时监控、服
务测试等功能。



